//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrelloClient.TrelloService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Scrum")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Contact {
            get {
                return this.ContactField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactField, value) != true)) {
                    this.ContactField = value;
                    this.RaisePropertyChanged("Contact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Board", Namespace="http://schemas.datacontract.org/2004/07/Scrum")]
    [System.SerializableAttribute()]
    public partial class Board : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BoardnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CreaterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Boardname {
            get {
                return this.BoardnameField;
            }
            set {
                if ((object.ReferenceEquals(this.BoardnameField, value) != true)) {
                    this.BoardnameField = value;
                    this.RaisePropertyChanged("Boardname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Creater {
            get {
                return this.CreaterField;
            }
            set {
                if ((this.CreaterField.Equals(value) != true)) {
                    this.CreaterField = value;
                    this.RaisePropertyChanged("Creater");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Lists", Namespace="http://schemas.datacontract.org/2004/07/Scrum")]
    [System.SerializableAttribute()]
    public partial class Lists : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CreaterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ListnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Creater {
            get {
                return this.CreaterField;
            }
            set {
                if ((this.CreaterField.Equals(value) != true)) {
                    this.CreaterField = value;
                    this.RaisePropertyChanged("Creater");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Listname {
            get {
                return this.ListnameField;
            }
            set {
                if ((object.ReferenceEquals(this.ListnameField, value) != true)) {
                    this.ListnameField = value;
                    this.RaisePropertyChanged("Listname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Card", Namespace="http://schemas.datacontract.org/2004/07/Scrum")]
    [System.SerializableAttribute()]
    public partial class Card : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CardnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CinfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CreaterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cardname {
            get {
                return this.CardnameField;
            }
            set {
                if ((object.ReferenceEquals(this.CardnameField, value) != true)) {
                    this.CardnameField = value;
                    this.RaisePropertyChanged("Cardname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cinfo {
            get {
                return this.CinfoField;
            }
            set {
                if ((object.ReferenceEquals(this.CinfoField, value) != true)) {
                    this.CinfoField = value;
                    this.RaisePropertyChanged("Cinfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Creater {
            get {
                return this.CreaterField;
            }
            set {
                if ((this.CreaterField.Equals(value) != true)) {
                    this.CreaterField = value;
                    this.RaisePropertyChanged("Creater");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/Scrum")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TrelloService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/login", ReplyAction="http://tempuri.org/IService1/loginResponse")]
        TrelloClient.TrelloService.User login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/login", ReplyAction="http://tempuri.org/IService1/loginResponse")]
        System.Threading.Tasks.Task<TrelloClient.TrelloService.User> loginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/register", ReplyAction="http://tempuri.org/IService1/registerResponse")]
        bool register(string username, string password, string email, string contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/register", ReplyAction="http://tempuri.org/IService1/registerResponse")]
        System.Threading.Tasks.Task<bool> registerAsync(string username, string password, string email, string contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addBoard", ReplyAction="http://tempuri.org/IService1/addBoardResponse")]
        bool addBoard(int user_id, string boardname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addBoard", ReplyAction="http://tempuri.org/IService1/addBoardResponse")]
        System.Threading.Tasks.Task<bool> addBoardAsync(int user_id, string boardname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addList", ReplyAction="http://tempuri.org/IService1/addListResponse")]
        bool addList(int user_id, string listname, int board_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addList", ReplyAction="http://tempuri.org/IService1/addListResponse")]
        System.Threading.Tasks.Task<bool> addListAsync(int user_id, string listname, int board_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addCard", ReplyAction="http://tempuri.org/IService1/addCardResponse")]
        bool addCard(int user_id, string cardname, int list_id, string c_info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addCard", ReplyAction="http://tempuri.org/IService1/addCardResponse")]
        System.Threading.Tasks.Task<bool> addCardAsync(int user_id, string cardname, int list_id, string c_info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/fetchBoard", ReplyAction="http://tempuri.org/IService1/fetchBoardResponse")]
        TrelloClient.TrelloService.Board[] fetchBoard(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/fetchBoard", ReplyAction="http://tempuri.org/IService1/fetchBoardResponse")]
        System.Threading.Tasks.Task<TrelloClient.TrelloService.Board[]> fetchBoardAsync(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/fetchList", ReplyAction="http://tempuri.org/IService1/fetchListResponse")]
        TrelloClient.TrelloService.Lists[] fetchList(int board_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/fetchList", ReplyAction="http://tempuri.org/IService1/fetchListResponse")]
        System.Threading.Tasks.Task<TrelloClient.TrelloService.Lists[]> fetchListAsync(int board_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/fetchCard", ReplyAction="http://tempuri.org/IService1/fetchCardResponse")]
        TrelloClient.TrelloService.Card[] fetchCard(int list_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/fetchCard", ReplyAction="http://tempuri.org/IService1/fetchCardResponse")]
        System.Threading.Tasks.Task<TrelloClient.TrelloService.Card[]> fetchCardAsync(int list_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/fetchUsers", ReplyAction="http://tempuri.org/IService1/fetchUsersResponse")]
        System.Collections.Generic.Dictionary<int, string> fetchUsers(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/fetchUsers", ReplyAction="http://tempuri.org/IService1/fetchUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> fetchUsersAsync(int user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateCard", ReplyAction="http://tempuri.org/IService1/updateCardResponse")]
        bool updateCard(int card_id, string cardname, string c_info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateCard", ReplyAction="http://tempuri.org/IService1/updateCardResponse")]
        System.Threading.Tasks.Task<bool> updateCardAsync(int card_id, string cardname, string c_info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/delCard", ReplyAction="http://tempuri.org/IService1/delCardResponse")]
        bool delCard(int card_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/delCard", ReplyAction="http://tempuri.org/IService1/delCardResponse")]
        System.Threading.Tasks.Task<bool> delCardAsync(int card_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        TrelloClient.TrelloService.CompositeType GetDataUsingDataContract(TrelloClient.TrelloService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<TrelloClient.TrelloService.CompositeType> GetDataUsingDataContractAsync(TrelloClient.TrelloService.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : TrelloClient.TrelloService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<TrelloClient.TrelloService.IService1>, TrelloClient.TrelloService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public TrelloClient.TrelloService.User login(string username, string password) {
            return base.Channel.login(username, password);
        }
        
        public System.Threading.Tasks.Task<TrelloClient.TrelloService.User> loginAsync(string username, string password) {
            return base.Channel.loginAsync(username, password);
        }
        
        public bool register(string username, string password, string email, string contact) {
            return base.Channel.register(username, password, email, contact);
        }
        
        public System.Threading.Tasks.Task<bool> registerAsync(string username, string password, string email, string contact) {
            return base.Channel.registerAsync(username, password, email, contact);
        }
        
        public bool addBoard(int user_id, string boardname) {
            return base.Channel.addBoard(user_id, boardname);
        }
        
        public System.Threading.Tasks.Task<bool> addBoardAsync(int user_id, string boardname) {
            return base.Channel.addBoardAsync(user_id, boardname);
        }
        
        public bool addList(int user_id, string listname, int board_id) {
            return base.Channel.addList(user_id, listname, board_id);
        }
        
        public System.Threading.Tasks.Task<bool> addListAsync(int user_id, string listname, int board_id) {
            return base.Channel.addListAsync(user_id, listname, board_id);
        }
        
        public bool addCard(int user_id, string cardname, int list_id, string c_info) {
            return base.Channel.addCard(user_id, cardname, list_id, c_info);
        }
        
        public System.Threading.Tasks.Task<bool> addCardAsync(int user_id, string cardname, int list_id, string c_info) {
            return base.Channel.addCardAsync(user_id, cardname, list_id, c_info);
        }
        
        public TrelloClient.TrelloService.Board[] fetchBoard(int user_id) {
            return base.Channel.fetchBoard(user_id);
        }
        
        public System.Threading.Tasks.Task<TrelloClient.TrelloService.Board[]> fetchBoardAsync(int user_id) {
            return base.Channel.fetchBoardAsync(user_id);
        }
        
        public TrelloClient.TrelloService.Lists[] fetchList(int board_id) {
            return base.Channel.fetchList(board_id);
        }
        
        public System.Threading.Tasks.Task<TrelloClient.TrelloService.Lists[]> fetchListAsync(int board_id) {
            return base.Channel.fetchListAsync(board_id);
        }
        
        public TrelloClient.TrelloService.Card[] fetchCard(int list_id) {
            return base.Channel.fetchCard(list_id);
        }
        
        public System.Threading.Tasks.Task<TrelloClient.TrelloService.Card[]> fetchCardAsync(int list_id) {
            return base.Channel.fetchCardAsync(list_id);
        }
        
        public System.Collections.Generic.Dictionary<int, string> fetchUsers(int user_id) {
            return base.Channel.fetchUsers(user_id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> fetchUsersAsync(int user_id) {
            return base.Channel.fetchUsersAsync(user_id);
        }
        
        public bool updateCard(int card_id, string cardname, string c_info) {
            return base.Channel.updateCard(card_id, cardname, c_info);
        }
        
        public System.Threading.Tasks.Task<bool> updateCardAsync(int card_id, string cardname, string c_info) {
            return base.Channel.updateCardAsync(card_id, cardname, c_info);
        }
        
        public bool delCard(int card_id) {
            return base.Channel.delCard(card_id);
        }
        
        public System.Threading.Tasks.Task<bool> delCardAsync(int card_id) {
            return base.Channel.delCardAsync(card_id);
        }
        
        public TrelloClient.TrelloService.CompositeType GetDataUsingDataContract(TrelloClient.TrelloService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<TrelloClient.TrelloService.CompositeType> GetDataUsingDataContractAsync(TrelloClient.TrelloService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
